import streamlit as st
from PIL import Image

try:
    from Nhan_Dien_Bien_So_Xe.Image_test import predict
except ImportError:

    st.error("L·ªói: Kh√¥ng th·ªÉ import h√†m 'predict' cho nh·∫≠n di·ªán bi·ªÉn s·ªë xe. Vui l√≤ng ki·ªÉm tra c·∫•u tr√∫c th∆∞ m·ª•c.")
    def predict(image_input):
        st.warning("Ch·ª©c nƒÉng d·ª± ƒëo√°n bi·ªÉn s·ªë xe ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh ƒë√∫ng c√°ch.")
        if image_input is not None:
            return [np.zeros((100, 200, 3), dtype=np.uint8)], ["Kh√¥ng c√≥ k·∫øt qu·∫£"]
        return [], []

import cv2
import numpy as np

def show():
    main_title_cfg = """
        <div style="display: flex; justify-content: center; align-items: center; padding: 0; margin: 0;">
            <h1 style="
                color: #ff40b5;
                background: white;
                padding: 15px 30px;
                border-radius: 15px;
                font-size: 36px;
                font-family: 'Segoe UI', 'Archivo', sans-serif;
                box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
                text-align: center;
                margin-top: 10px;
                margin-bottom: 0;
            ">
                üìù <b>Nh·∫≠n d·∫°ng bi·ªÉn s·ªë xe</b>
            </h1>
        </div>
        """
    st.markdown(main_title_cfg, unsafe_allow_html=True)

    img_in = None
    
    # T·∫£i l√™n h√¨nh ·∫£nh
    uploaded_img = st.file_uploader(
        "T·∫£i l√™n h√¨nh ·∫£nh xe", 
        type=["jpg", "png", "jpeg"], 
        key="license_plate_image_uploader",
        help="Ch·ªçn m·ªôt file ·∫£nh c√≥ ƒë·ªãnh d·∫°ng JPG, PNG, ho·∫∑c JPEG."
    )
    

    col1, col2 = st.columns([1, 1]) 
    
    with col1:
        st.subheader("H√¨nh ·∫¢nh G·ªëc")
        if uploaded_img is not None:
            try:
                img = Image.open(uploaded_img)
       
                frame = np.array(img)
                if frame.ndim == 2: 
                    img_in = cv2.cvtColor(frame, cv2.COLOR_GRAY2BGR)
                elif frame.shape[2] == 4:
                     img_in = cv2.cvtColor(frame, cv2.COLOR_RGBA2BGR)
                else: # RGB image
                    img_in = cv2.cvtColor(frame, cv2.COLOR_RGB2BGR)
                
                st.image(cv2.cvtColor(img_in, cv2.COLOR_BGR2RGB), caption='H√¨nh ·∫£nh ƒë√£ t·∫£i l√™n', use_container_width=True)
            except Exception as e:
                st.error(f"L·ªói khi x·ª≠ l√Ω h√¨nh ·∫£nh: {e}")
                img_in = None
        else:
            st.info("Vui l√≤ng t·∫£i l√™n m·ªôt h√¨nh ·∫£nh.")

    with col2:
        st.subheader("K·∫øt Qu·∫£ Nh·∫≠n Di·ªán")
        if img_in is not None:
            if st.button('üîé B·∫Øt ƒë·∫ßu nh·∫≠n di·ªán bi·ªÉn s·ªë', key="predict_license_plate_button"):
                with st.spinner('ƒêang x·ª≠ l√Ω...'):
                    try:
                        img_out_list, text_list = predict(img_in) 
                        
                        if not text_list and not img_out_list: 
                            st.warning("Kh√¥ng ph√°t hi·ªán ho·∫∑c nh·∫≠n di·ªán ƒë∆∞·ª£c bi·ªÉn s·ªë n√†o trong h√¨nh ·∫£nh.")
                        else:
                            for i in range(len(text_list)):
                                st.markdown(f"**Bi·ªÉn s·ªë {i+1}:**")
                                if i < len(img_out_list) and isinstance(img_out_list[i], np.ndarray) and img_out_list[i].size > 0 :
              
                                    img_display_plate = cv2.cvtColor(img_out_list[i], cv2.COLOR_BGR2RGB)
                                   
                                    st.image(img_display_plate, caption=f'·∫¢nh c·∫Øt bi·ªÉn s·ªë {i+1}', use_container_width=True) 
                                
                                st.success(f"N·ªôi dung: `{text_list[i]}`")
                    except NameError:
                         st.error("Ch·ª©c nƒÉng d·ª± ƒëo√°n bi·ªÉn s·ªë xe ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh ƒë√∫ng c√°ch (thi·∫øu h√†m predict).")
                    except Exception as e:
                        st.error(f"ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh nh·∫≠n di·ªán: {e}")
        else:
            st.info("Ch∆∞a c√≥ h√¨nh ·∫£nh ƒë·ªÉ nh·∫≠n di·ªán. Vui l√≤ng t·∫£i ·∫£nh l√™n ·ªü c·ªôt b√™n tr√°i.")

